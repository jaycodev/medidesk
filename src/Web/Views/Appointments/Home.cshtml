@model IEnumerable<Web.Models.Appointments.AppointmentListViewModel>

@using System.Text.Json
@using Web.Models.Account

@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

@{
    ViewBag.Title = "Inicio";

    var userJson = HttpContextAccessor.HttpContext!.Session.GetString("UserSession");
    UserSession? user = null;

    if (!string.IsNullOrEmpty(userJson))
    {
        var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
        user = JsonSerializer.Deserialize<UserSession>(userJson, options);
    }

    var activeRole = user?.ActiveRole?.ToLower();
    var isAdmin = activeRole == "administrador";
}


@if (isAdmin)
{
    var confirmedCount = Model.Count(a => string.Equals(a.Status, "confirmada", StringComparison.OrdinalIgnoreCase));
    var pendingCount = Model.Count(a => string.Equals(a.Status, "pendiente", StringComparison.OrdinalIgnoreCase));
    var cancelledCount = Model.Count(a => string.Equals(a.Status, "cancelada", StringComparison.OrdinalIgnoreCase));
    var attendedCount = Model.Count(a => string.Equals(a.Status, "atendida", StringComparison.OrdinalIgnoreCase));

    var appointmentsByMonth = Model
        .Where(a => a.Date != default)
        .GroupBy(a => a.Date.ToString("yyyy-MM"))
        .Select(g => new
        {
            Month = DateTime.ParseExact(g.Key + "-01", "yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture)
                        .ToString("MMM yyyy", new System.Globalization.CultureInfo("es-ES")),
            Total = g.Count()
        })
        .OrderBy(m => m.Month)
        .ToList();

    var consultationNames = new Dictionary<string, string> {
        { "consulta", "Consulta" },
        { "examen", "Examen" },
        { "operacion", "Operación" }
    };

    var appointmentsByConsultation = consultationNames
        .Select(pair => new
        {
            Type = pair.Value,
            Total = Model.Count(a => string.Equals(a.ConsultationType, pair.Key, StringComparison.OrdinalIgnoreCase))
        })
        .ToList();

    var dayNames = System.Globalization.CultureInfo.GetCultureInfo("es-ES").DateTimeFormat.AbbreviatedDayNames;
    var appointmentsByDay = dayNames
        .Select((day, index) => new
        {
            Day = day,
            Total = Model.Count(a => (int)a.Date.DayOfWeek == index)
        })
        .ToList();

    <style>
        .chart-fixed {
            height: 280px;
            max-height: 280px;
            width: 100%;
        }

        .card-body.chart-container {
            padding: 1rem;
            height: 300px;
            max-height: 300px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .card {
            overflow: hidden;
        }
    </style>

    <div class="row g-3 mb-4">
        <div class="col-12 col-md-6 col-xl-3">
            <div class="card shadow-sm border-primary bg-body h-100">
                <div class="card-body d-flex align-items-center">
                    <div class="me-3"><i class="fa-solid fa-calendar-check fa-2x text-primary"></i></div>
                    <div>
                        <h6 class="mb-1 text-primary">Confirmadas</h6>
                        <h4 class="mb-0 fw-bold text-primary">@confirmedCount</h4>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-12 col-md-6 col-xl-3">
            <div class="card shadow-sm border-warning bg-body h-100">
                <div class="card-body d-flex align-items-center">
                    <div class="me-3"><i class="fa-solid fa-hourglass-half fa-2x text-warning"></i></div>
                    <div>
                        <h6 class="mb-1 text-warning">Pendientes</h6>
                        <h4 class="mb-0 fw-bold text-warning">@pendingCount</h4>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-12 col-md-6 col-xl-3">
            <div class="card shadow-sm border-danger bg-body h-100">
                <div class="card-body d-flex align-items-center">
                    <div class="me-3"><i class="fa-solid fa-ban fa-2x text-danger"></i></div>
                    <div>
                        <h6 class="mb-1 text-danger">Canceladas</h6>
                        <h4 class="mb-0 fw-bold text-danger">@cancelledCount</h4>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-12 col-md-6 col-xl-3">
            <div class="card shadow-sm border-success bg-body h-100">
                <div class="card-body d-flex align-items-center">
                    <div class="me-3"><i class="fa-solid fa-check fa-2x text-success"></i></div>
                    <div>
                        <h6 class="mb-1 text-success">Atendidas</h6>
                        <h4 class="mb-0 fw-bold text-success">@attendedCount</h4>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row g-3">
        <div class="col-md-6">
            <div class="card border shadow-sm">
                <div class="card-header border-bottom bg-body text-body-emphasis">
                    <h6><i class="fa-solid fa-chart-pie me-1"></i> Citas por estado</h6>
                </div>
                <div class="card-body chart-container bg-body-tertiary">
                    <canvas id="chartEstado" class="chart-fixed"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card border shadow-sm">
                <div class="card-header border-bottom bg-body text-body-emphasis">
                    <h6><i class="fa-solid fa-chart-bar me-1"></i> Citas por mes</h6>
                </div>
                <div class="card-body chart-container bg-body-tertiary">
                    <canvas id="chartMes" class="chart-fixed"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card border shadow-sm">
                <div class="card-header border-bottom bg-body text-body-emphasis">
                    <h6><i class="fa-solid fa-stethoscope me-1"></i> Citas por tipo de consulta</h6>
                </div>
                <div class="card-body chart-container bg-body-tertiary">
                    <canvas id="chartRoles" class="chart-fixed"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card border shadow-sm">
                <div class="card-header border-bottom bg-body text-body-emphasis">
                    <h6><i class="fa-solid fa-calendar-day me-1"></i> Citas por día</h6>
                </div>
                <div class="card-body chart-container bg-body-tertiary">
                    <canvas id="chartDias" class="chart-fixed"></canvas>
                </div>
            </div>
        </div>
    </div>

    @section Scripts {
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <script>
            new Chart(document.getElementById('chartEstado').getContext('2d'), {
                type: 'doughnut',
                data: {
                    labels: ['Confirmadas', 'Pendientes', 'Canceladas', 'Atendidas'],
                    datasets: [{
                        data: [@confirmedCount, @pendingCount, @cancelledCount, @attendedCount],
                        backgroundColor: ['#0d6efd', '#ffc107', '#dc3545', '#198754'],
                        borderWidth: 1
                    }]
                },
                options: {
                    plugins: {
                        legend: { position: 'bottom' }
                    }
                }
            });

            new Chart(document.getElementById('chartMes').getContext('2d'), {
                type: 'bar',
                data: {
                    labels: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(appointmentsByMonth.Select(m => m.Month))),
                    datasets: [{
                        label: 'Citas',
                        data: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(appointmentsByMonth.Select(m => m.Total))),
                        backgroundColor: '#0d6efd'
                    }]
                },
                options: {
                    scales: {
                        y: { beginAtZero: true }
                    },
                    plugins: {
                        legend: { display: false }
                    }
                }
            });

            new Chart(document.getElementById('chartRoles').getContext('2d'), {
                type: 'bar',
                data: {
                    labels: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(appointmentsByConsultation.Select(c => c.Type))),
                    datasets: [{
                        label: 'Total',
                        data: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(appointmentsByConsultation.Select(c => c.Total))),
                        backgroundColor: ['#0d6efd', '#20c997', '#ffc107']
                    }]
                },
                options: {
                    scales: {
                        y: { beginAtZero: true }
                    },
                    plugins: {
                        legend: { display: false }
                    }
                }
            });

            new Chart(document.getElementById('chartDias').getContext('2d'), {
                type: 'line',
                data: {
                    labels: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(appointmentsByDay.Select(d => d.Day))),
                    datasets: [{
                        label: 'Citas por día',
                        data: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(appointmentsByDay.Select(d => d.Total))),
                        borderColor: '#198754',
                        backgroundColor: 'rgba(25, 135, 84, 0.2)',
                        tension: 0.4,
                        fill: true
                    }]
                },
                options: {
                    scales: {
                        y: { beginAtZero: true }
                    },
                    plugins: {
                        legend: { position: 'bottom' }
                    }
                }
            });
        </script>
    }
}
else
{
    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.0/main.min.css" rel="stylesheet" />
    <link href="~/css/calendar.css" rel="stylesheet" />

    <div class="mb-3 d-flex flex-wrap gap-2 align-items-center justify-content-center">
        <span class="badge border bg-primary-subtle border-primary-subtle text-primary-emphasis rounded-pill">
            <i class="fa-solid fa-calendar-check me-1"></i>
            Confirmada
        </span>
        <span class="badge border bg-warning-subtle border-warning-subtle text-warning-emphasis rounded-pill">
            <i class="fa-solid fa-hourglass-half me-1"></i>
            Pendiente
        </span>
        <span class="badge border bg-danger-subtle border-danger-subtle text-danger-emphasis rounded-pill">
            <i class="fa-solid fa-ban me-1"></i>
            Cancelada
        </span>
        <span class="badge border bg-success-subtle border-success-subtle text-success-emphasis rounded-pill">
            <i class="fa-solid fa-check me-1"></i>
            Atendida
        </span>
    </div>

    <div id="calendar"></div>

    @section Scripts {
        <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.0/main.min.js"></script>
        <script>
        window.appointmentEvents = [
            @foreach (var appointment in Model)
            {
                var startDateTime = appointment.Date.ToDateTime(TimeOnly.FromTimeSpan(appointment.Time));
                var endDateTime = startDateTime.AddHours(1);
                var timeFormatted = TimeOnly.FromTimeSpan(appointment.Time).ToString("HH:mm");

                <text>
                {
                    title: '',
                    start: '@startDateTime.ToString("yyyy-MM-ddTHH:mm:ss")',
                    end: '@endDateTime.ToString("yyyy-MM-ddTHH:mm:ss")',
                    timeFormatted: '@timeFormatted',
                    status: '@(appointment.Status?.Trim().ToLower() ?? "")',
                    id: '@appointment.AppointmentId'
                },
                </text>
            }
        ];
        </script>
        <script src="~/js/calendar.js"></script>
    }
}
